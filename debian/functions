#!/bin/bash

install_all() {
	install_nodejs
	install_bat
	install_slack
	install_remarkable
	install_azure_data_studio
	install_hexyl
	install_octant
	install_step
	install_minikube
	install_python
	install_nvim
	install_flutter
	install_k9s
	install_popeye
	install_android_studio
	install_azcopy
	install_kubectx
	install_icdiff
	install_lolcat
	install_have
	install_light
	install_speedtest
	install_stern
	install_sampler
	install_hey
	install_nuget
	install_docker_compose
	install_sqlpackage
	install_vault
	install_sc_im
	install_vscode_extensions
	install_ruby
	install_vim
	install_git
	install_gh
	install_go
	install_bb_pr
	install_terraform
	install_fzf
	install_krew
	install_pandoc
	install_kind
	install_code_server
}

install_git() {
	_CURRENT_DIR=$PWD
	INSTALL_DIR=$(mktemp -d)
	BASH_COMPLETION_DIR=/etc/bash_completion.d
  source $HOME/git/installation/versions-on-github

	sudo apt purge -y git git-core
	sudo apt autoremove -y
	hash -r

  curl -o $INSTALL_DIR/git.tar.gz -sSL https://github.com/git/git/archive/v${VERSION_GIT_GIT}.tar.gz
	tar xvzf $INSTALL_DIR/git.tar.gz -C $INSTALL_DIR/
	cd $INSTALL_DIR/git-*
	make prefix=/usr/local all
	sudo make prefix=/usr/local install

	sudo curl -o $BASH_COMPLETION_DIR/git-completion.bash -sS https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash

	cd $_CURRENT_DIR
}

install_docker_compose() {
	INSTALL_DIR=$(mktemp -d)
	LOCAL_BIN=/usr/local/bin
  BASH_COMPLETION_DIR=/etc/bash_completion.d
  source $HOME/git/installation/versions-on-github

	sudo curl -o $LOCAL_BIN/docker-compose -sSL "https://github.com/docker/compose/releases/download/${VERSION_DOCKER_COMPOSE}/docker-compose-$(uname -s)-$(uname -m)"
  sudo curl -o $BASH_COMPLETION_DIR/docker-compose -sS https://raw.githubusercontent.com/docker/compose/${VERSION_DOCKER_COMPOSE}/contrib/completion/bash/docker-compose
  sudo chmod a+x $LOCAL_BIN/docker-compose
}

install_ruby() {
	_CURRENT_DIR=$PWD
  source $HOME/git/installation/versions-on-github

	if [ ! -d $HOME/.rbenv ]; then
		git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
	else
		cd $HOME/.rbenv
		git pull
	fi
	if [ ! -d $HOME/.rbenv/plugins/ruby-build ]; then
		git clone https://github.com/rbenv/ruby-build.git $HOME/.rbenv/plugins/ruby-build
	else
		cd $HOME/.rbenv/plugins/ruby-build
		git pull
	fi

	$HOME/.rbenv/bin/rbenv init
	$HOME/.rbenv/bin/rbenv install $VERSION_RUBY_RUBY
	$HOME/.rbenv/bin/rbenv global $VERSION_RUBY_RUBY
	echo "gem: --no-document" > $HOME/.gemrc
	$HOME/.rbenv/versions/$VERSION_RUBY_RUBY/bin/gem install bundler
	$HOME/.rbenv/versions/$VERSION_RUBY_RUBY/bin/gem install travis

	cd $_CURRENT_DIR
}

install_python() {
	VERSION_PYTHON=3.7.8
	VERSION_PYTHON_MAJOR=3.7

	_CURRENT_DIR=$PWD
	INSTALL_DIR=$(mktemp -d)
	LOCAL_BIN=/usr/local/bin

	curl -o $INSTALL_DIR/python.tar.xz -sS https://www.python.org/ftp/python/${VERSION_PYTHON}/Python-${VERSION_PYTHON}.tar.xz
	tar -xf $INSTALL_DIR/python.tar.xz -C $INSTALL_DIR/
	cd $INSTALL_DIR/Python-${VERSION_PYTHON}
	./configure --enable-optimizations
	make
	sudo make install
	sudo update-alternatives --install /usr/bin/python python $LOCAL_BIN/python${VERSION_PYTHON_MAJOR} 1
	sudo update-alternatives --set python $LOCAL_BIN/python${VERSION_PYTHON_MAJOR}

	cd $_CURRENT_DIR

  pip install --user -r $HOME/git/installation/requirements.txt
}

install_go() {
	VERSION_GOLANG=1.14.6

	export GOPATH=$HOME/git
	GO_BIN_DIR=$GOPATH/bin

	INSTALL_DIR=$(mktemp -d)

	if [ ! -d $GO_BIN_DIR ]; then
		mkdir $GO_BIN_DIR
	fi
	curl -o $INSTALL_DIR/golang.tar.gz -sS https://storage.googleapis.com/golang/go${VERSION_GOLANG}.linux-amd64.tar.gz
	if [ -d /usr/local/go ]; then
		sudo rm -rf /usr/local/go
	fi
	sudo tar xvf $INSTALL_DIR/golang.tar.gz -C /usr/local/
	for p in $(cat $HOME/git/installation/go-packages.txt); do /usr/local/go/bin/go get -u $p; done
}

install_vim() {
	_CURRENT_DIR=$PWD

	if [ -d $HOME/.vim ]; then
		rm -rf $HOME/.vim
	fi
	git clone --recursive https://github.com/alexhokl/.vim $HOME/.vim
	cd $HOME/.vim
	make install

	cd $_CURRENT_DIR
}

install_vscode_extensions() {
	for e in $(cat $HOME/git/installation/vscode-extensions.txt); do /usr/bin/code --force --install-extension $e; done
	mkdir -p $HOME/.config/Code/User
	/bin/cp -f $HOME/git/installation/vscode_settings.json $HOME/.config/Code/User/settings.json
}

install_sc_im() {
	_CURRENT_DIR=$PWD

	git clone https://github.com/jmcnamara/libxlsxwriter.git $HOME/git/libxlsxwriter
	git clone https://github.com/andmarti1424/sc-im.git $HOME/git/sc-im
	cd $HOME/git/libxlsxwriter
	make
	sudo make install
	cd $HOME/git/sc-im/src
	make
	sudo make install

	cd $_CURRENT_DIR
}

install_vault() {
	INSTALL_DIR=$(mktemp -d)
	LOCAL_BIN=/usr/local/bin
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/vault.zip -sSL https://releases.hashicorp.com/vault/${VERSION_HASHICORP_VAULT}/vault_${VERSION_HASHICORP_VAULT}_linux_amd64.zip
	unzip $INSTALL_DIR/vault.zip
	sudo /bin/mv -f vault $LOCAL_BIN/
	$LOCAL_BIN/vault -autocomplete-install
}

install_sqlpackage() {
	INSTALL_DIR=$(mktemp -d)
	LOCAL_BIN=/usr/local/bin
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/sqlpackage.zip -sSL https://go.microsoft.com/fwlink/?linkid=2087431
	unzip $INSTALL_DIR/sqlpackage.zip -d $INSTALL_DIR/sqlpackage
	chmod a+x $INSTALL_DIR/sqlpackage/sqlpackage
	sudo /bin/mv -f $INSTALL_DIR/sqlpackage /opt/
	sudo ln -s /opt/sqlpackage/sqlpackage $LOCAL_BIN/sqlpackage
}

install_azcopy() {
	_CURRENT_DIR=$PWD

	INSTALL_DIR=$(mktemp -d)
	LOCAL_BIN=/usr/local/bin

	curl -o $INSTALL_DIR/azcopy.tar.gz -sSL https://aka.ms/downloadazcopy-v10-linux
	tar xvzf $INSTALL_DIR/azcopy.tar.gz -C $INSTALL_DIR/
	cd $INSTALL_DIR/azcopy_*
	sudo /bin/mv -f azcopy $LOCAL_BIN/

	cd $_CURRENT_DIR
}

install_android_studio() {
	INSTALL_DIR=$(mktemp -d)

	curl -o $INSTALL_DIR/android-studio.tar.gz -sSL https://dl.google.com/dl/android/studio/ide-zips/3.5.3.0/android-studio-ide-191.6010548-linux.tar.gz
	if [ -d /usr/local/android-studio ]; then
		sudo rm -rf /usr/local/android-studio
	fi
	sudo tar xvzf $INSTALL_DIR/android-studio.tar.gz -C /usr/local/
	if [ -L /usr/local/bin/studio.sh ]; then
		sudo unlink /usr/local/bin/studio.sh
	fi
	sudo ln -s /usr/local/android-studio/bin/studio.sh /usr/local/bin/studio.sh
}

install_popeye() {
	INSTALL_DIR=$(mktemp -d)
	LOCAL_BIN=/usr/local/bin
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/popeye.tar.gz -sSL https://github.com/derailed/popeye/releases/download/v${VERSION_DERAILED_POPEYE}/popeye_Linux_x86_64.tar.gz
	tar xvzf $INSTALL_DIR/popeye.tar.gz -C $INSTALL_DIR/
	sudo /bin/mv -f $INSTALL_DIR/popeye $LOCAL_BIN/
}

install_k9s() {
	INSTALL_DIR=$(mktemp -d)
	LOCAL_BIN=/usr/local/bin
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/k9s.tar.gz -sSL https://github.com/derailed/k9s/releases/download/v${VERSION_DERAILED_K9S}/k9s_Linux_x86_64.tar.gz
	tar xvzf $INSTALL_DIR/k9s.tar.gz -C $INSTALL_DIR/
	sudo /bin/mv -f $INSTALL_DIR/k9s $LOCAL_BIN/
}

install_flutter() {
	_CURRENT_DIR=$PWD

	_REPO_DIR=$GOPATH/flutter
	if [ -d $_REPO_DIR ]; then
		rm -rf $_REPO_DIR
	fi
	git clone https://github.com/flutter/flutter.git $_REPO_DIR
	cd $_REPO_DIR
	git checkout stable

	cd $_CURRENT_DIR
}

install_nvim() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/nvim.appimage -sSL https://github.com/neovim/neovim/releases/download/v${VERSION_NEOVIM_NEOVIM}/nvim.appimage
	chmod u+x $INSTALL_DIR/nvim.appimage
	sudo /bin/mv -f $INSTALL_DIR/nvim.appimage /usr/bin/nvim
}

install_nodejs() {
	curl -sL https://deb.nodesource.com/setup_12.x curl | sudo -E bash -
	sudo apt update
	sudo apt install -y nodejs
	sudo npm i -g $(cat $HOME/git/installation/npm-list.txt)
}

install_slack() {
	INSTALL_DIR=$(mktemp -d)

	VERSION_SLACK=4.2.0

	curl -o $INSTALL_DIR/slack.deb -sSL https://downloads.slack-edge.com/linux_releases/slack-desktop-${VERSION_SLACK}-amd64.deb
	sudo dpkg -i $INSTALL_DIR/slack.deb
}

install_bat() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/bat.deb -sSL https://github.com/sharkdp/bat/releases/download/v${VERSION_SHARKDP_BAT}/bat-musl_${VERSION_SHARKDP_BAT}_amd64.deb
	sudo dpkg -i $INSTALL_DIR/bat.deb
}

install_remarkable() {
	INSTALL_DIR=$(mktemp -d)

	VERSION_REMARKABLE=1.87

	curl -o $INSTALL_DIR/remarkable.deb -sS https://remarkableapp.github.io/files/remarkable_${VERSION_REMARKABLE}_all.deb
	sudo dpkg -i $INSTALL_DIR/remarkable.deb
}

install_azure_data_studio() {
	INSTALL_DIR=$(mktemp -d)

	curl -o $INSTALL_DIR/azuredatastudio.deb -sSL https://go.microsoft.com/fwlink/?linkid=2138508
	sudo dpkg -i $INSTALL_DIR/azuredatastudio.deb
}

install_hexyl() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/hexyl.deb -sSL https://github.com/sharkdp/hexyl/releases/download/v${VERSION_SHARKDP_HEXYL}/hexyl_${VERSION_SHARKDP_HEXYL}_amd64.deb
	sudo dpkg -i $INSTALL_DIR/hexyl.deb
}

install_octant() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/octant.deb -sSL https://github.com/vmware-tanzu/octant/releases/download/v${VERSION_VMWARE__TANZU_OCTANT}/octant_${VERSION_VMWARE__TANZU_OCTANT}_Linux-64bit.deb
	sudo dpkg -i $INSTALL_DIR/octant.deb
}

install_step() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/step.deb -sSL https://github.com/smallstep/cli/releases/download/v${VERSION_SMALLSTEP_CLI}/step-cli_${VERSION_SMALLSTEP_CLI}_amd64.deb
	sudo dpkg -i $INSTALL_DIR/step.deb
}

install_minikube() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/minikube.deb -sSL https://storage.googleapis.com/minikube/releases/latest/minikube_${VERSION_KUBERNETES_MINIKUBE}-0_amd64.deb
	sudo dpkg -i $INSTALL_DIR/minikube.deb
}

install_kubectx() {
	BASH_COMPLETION_DIR=/etc/bash_completion.d
	LOCAL_BIN=/usr/local/bin

	sudo curl -o $BASH_COMPLETION_DIR/kubectx.bash -sS https://raw.githubusercontent.com/ahmetb/kubectx/master/completion/kubectx.bash
	sudo curl -o $BASH_COMPLETION_DIR/kubens.bash -sS https://raw.githubusercontent.com/ahmetb/kubectx/master/completion/kubens.bash
	sudo curl -o $LOCAL_BIN/kubectx -sSL https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx
	sudo curl -o $LOCAL_BIN/kubens -sSL https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens
	sudo chmod a+x $LOCAL_BIN/kubectx
	sudo chmod a+x $LOCAL_BIN/kubens
}

install_lolcat() {
	LOCAL_BIN=/usr/local/bin

	sudo curl -o $LOCAL_BIN/lolcat -sS https://raw.githubusercontent.com/tehmaze/lolcat/master/lolcat
	sudo chmod a+x $LOCAL_BIN/lolcat
}

install_have() {
	LOCAL_BIN=/usr/local/bin

	sudo curl -o $LOCAL_BIN/have -sSL https://misc.j3ss.co/binaries/have
	sudo chmod a+x $LOCAL_BIN/have
}

install_light() {
	INSTALL_DIR=$(mktemp -d)
	source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/light.tar.gz -sSL https://github.com/haikarainen/light/archive/v${VERSION_HAIKARAINEN_LIGHT}.tar.gz
	tar xf $INSTALL_DIR/light.tar.gz -C $INSTALL_DIR/
	cd $INSTALL_DIR/light-*
	./configure --with-udev && make
	sudo make install
}

install_speedtest() {
	LOCAL_BIN=/usr/local/bin

	sudo curl -o $LOCAL_BIN/speedtest -sS https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
	sudo chmod a+x $LOCAL_BIN/speedtest
}

install_stern() {
	LOCAL_BIN=/usr/local/bin
  source $HOME/git/installation/versions-on-github

	sudo curl -o $LOCAL_BIN/stern -sSL https://github.com/wercker/stern/releases/download/${VERSION_WERCKER_STERN}/stern_linux_amd64
	sudo chmod a+x $LOCAL_BIN/stern
}

install_sampler() {
	LOCAL_BIN=/usr/local/bin
  source $HOME/git/installation/versions-on-github

	sudo curl -o $LOCAL_BIN/sampler -sSL https://github.com/sqshq/sampler/releases/download/v${VERSION_SQSHQ_SAMPLER}/sampler-${VERSION_SQSHQ_SAMPLER}-linux-amd64
	sudo chmod a+x $LOCAL_BIN/sampler
}

install_hey() {
	LOCAL_BIN=/usr/local/bin

	sudo curl -o $LOCAL_BIN/hey -sSL https://storage.googleapis.com/hey-release/hey_linux_amd64
	sudo chmod a+x $LOCAL_BIN/hey
}

install_nuget() {
	LOCAL_BIN=/usr/local/bin

	sudo curl -o $LOCAL_BIN/nuget.exe -sS https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
}

install_bb_pr() {
	BASH_COMPLETION_DIR=/etc/bash_completion.d

	go get -u github.com/alexhokl/go-bb-pr
	sudo curl -o $BASH_COMPLETION_DIR/go-bb-pr-completion.bash -sS https://raw.githubusercontent.com/alexhokl/go-bb-pr/master/go-bb-pr-completion.bash
}

install_gh() {
	_CURRENT_DIR=$PWD

	git clone https://github.com/cli/cli.git $HOME/git/githubcli
	cd $HOME/git/githubcli
	make
	/bin/cp -f ./bin/gh $HOME/git/bin/

	cd $_CURRENT_DIR
}

install_terraform() {
	LOCAL_BIN=/usr/local/bin
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/terraform.zip -sSL https://releases.hashicorp.com/terraform/${VERSION_HASHICORP_TERRAFORM}/terraform_${VERSION_HASHICORP_TERRAFORM}_linux_amd64.zip
	unzip $INSTALL_DIR/terraform.zip -d $INSTALL_DIR/
	sudo /bin/mv -f $INSTALL_DIR/terraform $LOCAL_BIN/
}

install_fzf() {
	git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install
}

install_krew() {
	set -x; cd "$(mktemp -d)" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.{tar.gz,yaml}" &&
  tar zxvf krew.tar.gz &&
  KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" &&
  "$KREW" install --manifest=krew.yaml --archive=krew.tar.gz &&
  "$KREW" update
}

install_pandoc() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/pandoc.deb -sSL https://github.com/jgm/pandoc/releases/download/${VERSION_JGM_PANDOC}/pandoc-${VERSION_JGM_PANDOC}-amd64.deb
	sudo dpkg -i $INSTALL_DIR/pandoc.deb
}

install_kind() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/kind -sSL https://kind.sigs.k8s.io/dl/v${VERSION_KUBERNETES__SIGS_KIND}/kind-$(uname)-amd64
	chmod +x $INSTALL_DIR/kind
	sudo /bin/mv -f $INSTALL_DIR/kind $LOCAL_BIN/
}

install_code_server() {
	curl -fsSL https://code-server.dev/install.sh | sh
}
