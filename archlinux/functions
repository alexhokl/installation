#!/bin/bash

update_all() {
	sudo pacman -Sy --noconfirm archlinux-keyring;
	sudo pacman -Syu --noconfirm;
	configure_rust
	yay -Syu --noconfirm --answerclean A --answerdiff N;
	install_datree
	install_go_packages
	install_cargo_packages
	install_vscode_extensions
	install_dotnet_tools
	install_gems
	update_python_packages
	install_gcpdiag
	flutter upgrade
	install_slack_cli
	install_sqlcmd
	install_vim
}

install_all() {
	install_have
	install_sc_im
	install_another_redis_desktop_manager
	install_gcpdiag
	configure_rust
	install_slack_cli
	install_sqlcmd
}

install_vscode_extensions() {
	cat $HOME/git/installation/vscode-extensions.txt | xargs -n 1 /usr/bin/code --force --install-extension
	mkdir -p $HOME/.config/Code/User
	/bin/cp -f $HOME/git/installation/vscode_settings.json $HOME/.config/Code/User/settings.json
}

install_azure_data_studio_extensions() {
	cat $HOME/git/installation/azuredatastudio.extensions | xargs -n 1 /usr/bin/azuredatastudio --force --install-extension
}

install_dotnet_tools() {
	cat $HOME/git/installation/dotnet_tools | xargs -n 1 dotnet tool install -g
}

install_sc_im() {
	pushd $PWD

	git clone https://github.com/jmcnamara/libxlsxwriter.git $HOME/git/libxlsxwriter
	cd $HOME/git/libxlsxwriter
	make
	sudo make install
	git clone https://github.com/andmarti1424/sc-im.git $HOME/git/sc-im
	cd $HOME/git/sc-im
	make
	sudo make install

	popd
}

install_nvim() {
	# if [[ -n "$(which nvim)" ]]; then
	# 	CURRENT_VERSION=$(nvim --version | grep ^NVIM | awk '{ gsub("v", "", $2); print $2 }')
	# fi
  #
	LOCAL_BIN=/usr/local/bin
	INSTALL_DIR=$(mktemp -d)
  # source $HOME/git/installation/versions-on-github
  #
	# if [ "$CURRENT_VERSION" == "$VERSION_NEOVIM_NEOVIM" ]; then
	# 	echo "nvim ($CURRENT_VERSION) is up-to-date."
	# 	return
	# fi

	curl -o $INSTALL_DIR/nvim.appimage -sSL https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
	chmod u+x $INSTALL_DIR/nvim.appimage
	sudo /bin/mv -f $INSTALL_DIR/nvim.appimage $LOCAL_BIN/nvim
}

install_vim() {
	pushd $PWD

	if [ -d $HOME/.vim ]; then
		rm -rf $HOME/.vim
	fi
	git clone --recursive -b master https://github.com/alexhokl/.vim $HOME/.vim
	cd $HOME/.vim
	make install

	popd
}

install_have() {
	LOCAL_BIN=/usr/local/bin

	sudo curl -o $LOCAL_BIN/have -sSL https://misc.j3ss.co/binaries/have
	sudo chmod a+x $LOCAL_BIN/have
}

install_cargo_packages() {
	cat $HOME/git/installation/cargo_packages | xargs -n 1 cargo install
}

install_go_packages() {
	cat $HOME/git/installation/go_packages | xargs -n 1 go install
}

install_another_redis_desktop_manager() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/another-redis-desktop-manager -sSL https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v${VERSION_QISHIBO_ANOTHERREDISDESKTOPMANAGER}/Another-Redis-Desktop-Manager.${VERSION_QISHIBO_ANOTHERREDISDESKTOPMANAGER}.AppImage
	chmod u+x $INSTALL_DIR/another-redis-desktop-manager
	sudo /bin/mv -f $INSTALL_DIR/another-redis-desktop-manager /usr/bin/
}

update_python_packages() {
	python -m pip install --upgrade --user pip
	python -m pip install --upgrade --user -r $HOME/git/installation/requirements.txt
}

install_gems() {
	cat $HOME/git/installation/gem-list | xargs -n 1 gem install
}

configure_rust() {
	rustup install stable
}

install_kubelogin() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/kubelogin.zip -sSL https://github.com/Azure/kubelogin/releases/download/v${VERSION_AZURE_KUBELOGIN}/kubelogin-linux-amd64.zip
	unzip $INSTALL_DIR/kubelogin.zip -d $INSTALL_DIR/
	chmod +x $INSTALL_DIR/bin/linux_amd64/kubelogin
	sudo /bin/mv -f $INSTALL_DIR/bin/linux_amd64/kubelogin /usr/local/bin/
}

install_datree() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/datree.zip -sSL https://github.com/datreeio/datree/releases/download/${VERSION_DATREEIO_DATREE}/datree-cli_${VERSION_DATREEIO_DATREE}_Linux_x86_64.zip
	unzip $INSTALL_DIR/datree.zip -d $INSTALL_DIR/
	chmod +x $INSTALL_DIR/datree
	sudo /bin/mv -f $INSTALL_DIR/datree /usr/local/bin/
}

install_d2() {
	curl -fsSL https://d2lang.com/install.sh | sh -s --
}

install_yq() {
	INSTALL_DIR=$(mktemp -d)

	curl -o $INSTALL_DIR/yq -sSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
	chmod +x $INSTALL_DIR/yq
	sudo /bin/mv -f $INSTALL_DIR/yq /usr/local/bin/
}

install_gcpdiag() {
	sudo curl -o /usr/local/bin/gcpdiag -sSL https://gcpdiag.dev/gcpdiag.sh
	sudo chmod +x /usr/local/bin/gcpdiag
}

install_task_completion() {
	sudo curl -o /etc/bash_completion.d/task.bash -sSL https://raw.githubusercontent.com/go-task/task/master/completion/bash/task.bash
}

install_asdf() {
	pushd $PWD

	cd $HOME/git
	_REPO_DIRECTORY=$HOME/git/asdf-vm

	if [ -d "${_REPO_DIRECTORY}" ]; then
		rm -rf $_REPO_DIRECTORY
	fi
	git clone https://aur.archlinux.org/asdf-vm.git && cd asdf-vm && makepkg -si

	popd
}

install_flutter() {
	pushd $PWD

	_REPO_DIR=$HOME/git/flutter
	if [ -d $_REPO_DIR ]; then
		rm -rf $_REPO_DIR
	fi
	git clone https://github.com/flutter/flutter.git $_REPO_DIR
	cd $_REPO_DIR
	git checkout stable

	popd
}

install_slack_cli() {
	curl -fsSL https://downloads.slack-edge.com/slack-cli/install.sh | bash -s slack-cli
}

install_telepresence() {
	sudo curl -fL https://app.getambassador.io/download/tel2oss/releases/download/v2.14.0/telepresence-darwin-arm64 -o /usr/local/bin/telepresence
	sudo chmod a+x /usr/local/bin/telepresence
}

install_sqlcmd() {
	INSTALL_DIR=$(mktemp -d)
  source $HOME/git/installation/versions-on-github

	curl -o $INSTALL_DIR/sqlcmd.bz2 -sSL https://github.com/microsoft/go-sqlcmd/releases/download/v${VERSION_MICROSOFT_GO__SQLCMD}/sqlcmd-v${VERSION_MICROSOFT_GO__SQLCMD}-linux-amd64.tar.bz2
	tar xvf $INSTALL_DIR/sqlcmd.bz2 -C $INSTALL_DIR/
	chmod +x $INSTALL_DIR/sqlcmd
	sudo /bin/mv -f $INSTALL_DIR/sqlcmd /usr/local/bin/
}
